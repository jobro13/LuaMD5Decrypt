local bit = require "bit"
local color = require "color"
local event = require "event"
local md5 = require "md5"

-- pos to change: 1
-- a == a
-- b == b
-- c == c 
-- d == d 

-- pos to change : 4
-- a == d 
-- b == a
-- c == b
-- d == c

function GetString(a,b,c,d,pos)
    local t = {a,b,c,d}
    local mutate = pos - 1
    local function tswap()
        local new = {}
        local mute = {2,3,4,1}
        for i = 1,4 do 
            new[i] =t[mute[i]]
        end 
        t = new 
    end 
    for i = 1, mutate do 
        tswap()
    end 
    return t 
end 

function ShowByteDiff(Byte1, Byte2, len)
    local old = bit.tostr(bit.tobits(Byte1),len)
        local new = bit.tostr(bit.tobits(Byte2),len)
        print(old)
        for i = 1, 32 do 
            if old:sub(i,i) == new:sub(i,i) then 
                color("%{green}")
            else 
                color("%{red}")
            end 
            io.write(new:sub(i,i))
        end 
        color.reset()
        io.write("\n")
    end

local Start

function BeginOperation(ShiftFunction, StartByte, Byte1, Byte2, Byte3, PreviousStateByte, LeftShifts, ConstValue, PosToChange)
    local hash = md5.state_tostr(unpack(GetString(StartByte, Byte1, Byte2, Byte3, PosToChange)))
    Start = StartByte
end 

function EndOperation(ShiftFunction, StartByte, Byte1, Byte2, Byte3, PreviousStateByte, LeftShifts, ConstValue, PosToChange)
        local hash = md5.state_tostr(unpack(GetString(StartByte, Byte1, Byte2, Byte3, PosToChange)))

        ShowByteDiff(Start, StartByte, 32)
        local REGISTERS = {"A", "B", "C", "D"}
        function GET_REG(i)
            local real_i = ((i - 1) % 4) + 1
            return REGISTERS[real_i]
        end 
        local bytes = {Byte1, Byte2, Byte3}
        local i = 1 
        print()
        for reg = PosToChange + 1 , PosToChange + 3 do
            local byte = bytes[i] % (2^32)
            i = i + 1
            print( bit.tostr(bit.tobits(byte),32) .. " : "..GET_REG(reg))
        end
        print()
end 

local tb = function(input,len) 
    return bit.tostr(bit.tobits(input), len or 32)
end



md5.beginOp:connect(BeginOperation)
md5.endOp:connect(EndOperation)
md5.endBlock:connect(function(a,b,c,d, A, B, C, D)
    function PLUSWRITE(a,A)
        print(tb(a)) 
        print(tb(A))
        print("--------- +")
        print(tb(a+A))
        print()
    end 
    PLUSWRITE(a,A)
    PLUSWRITE(b,B)
    PLUSWRITE(c,C)
    PLUSWRITE(d,D)
end)


print(md5.Calc"")

print("Program exited succesfully.")